plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.vnptit.vnpt.homeclinic"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        warning 'deprecation', 'unchecked'
    }

    defaultConfig {
        applicationId = "com.vnptit.vnpt.homeclinic"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            }
            android.applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def appName = "VNPT-HIS"
                if(output.baseName == "staging-release") {
                    outputFileName = appName + "-v${variant.versionName}-b${variant.versionCode}-stag.apk"
                } else {
                    outputFileName = appName + "-v${variant.versionName}-b${variant.versionCode}.apk"
                }
            }
        }
    }

    flavorDimensions "app"
productFlavors {
   production {
       dimension "app"
       versionCode flutterVersionCode.toInteger()
       versionName flutterVersionName
       resValue "string", "app_name", "VNPT HIS"
   }
   staging {
       applicationIdSuffix ".staging"
       dimension "app"
       versionCode flutterVersionCode.toInteger()
       versionName flutterVersionName
       resValue "string", "app_name", "VNPT HIS Staging"
   }
}
}

flutter {
    source = "../.."
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.6.1' 
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.databinding:databinding-runtime:7.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation("com.airbnb.android:lottie:6.3.0")
}
